/*
 * This file is generated by jOOQ.
 */
package jibs.airflow.middlewaredb.tables;


import jibs.airflow.middlewaredb.DefaultSchema;
import jibs.airflow.middlewaredb.Keys;
import jibs.airflow.middlewaredb.tables.records.MiddlewareRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.12"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Middleware extends TableImpl<MiddlewareRecord> {

    private static final long serialVersionUID = -295016384;

    /**
     * The reference instance of <code>middleware</code>
     */
    public static final Middleware MIDDLEWARE = new Middleware();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MiddlewareRecord> getRecordType() {
        return MiddlewareRecord.class;
    }

    /**
     * The column <code>middleware.trigger_id</code>.
     */
    public final TableField<MiddlewareRecord, Integer> TRIGGER_ID = createField(DSL.name("trigger_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>middleware.trigger_name</code>.
     */
    public final TableField<MiddlewareRecord, String> TRIGGER_NAME = createField(DSL.name("trigger_name"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>middleware.trigger_source_dag</code>.
     */
    public final TableField<MiddlewareRecord, String> TRIGGER_SOURCE_DAG = createField(DSL.name("trigger_source_dag"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>middleware.trigger_target_dag</code>.
     */
    public final TableField<MiddlewareRecord, String> TRIGGER_TARGET_DAG = createField(DSL.name("trigger_target_dag"), SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>middleware.trigger_description</code>.
     */
    public final TableField<MiddlewareRecord, String> TRIGGER_DESCRIPTION = createField(DSL.name("trigger_description"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>middleware.datahub_updated_at</code>.
     */
    public final TableField<MiddlewareRecord, OffsetDateTime> DATAHUB_UPDATED_AT = createField(DSL.name("datahub_updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>middleware.last_trigger_at</code>.
     */
    public final TableField<MiddlewareRecord, OffsetDateTime> LAST_TRIGGER_AT = createField(DSL.name("last_trigger_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>middleware.created_at</code>.
     */
    public final TableField<MiddlewareRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>middleware.updated_at</code>.
     */
    public final TableField<MiddlewareRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private Middleware(Name alias, Table<MiddlewareRecord> aliased) {
        this(alias, aliased, null);
    }

    private Middleware(Name alias, Table<MiddlewareRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>middleware</code> table reference
     */
    public Middleware(String alias) {
        this(DSL.name(alias), MIDDLEWARE);
    }

    /**
     * Create an aliased <code>middleware</code> table reference
     */
    public Middleware(Name alias) {
        this(alias, MIDDLEWARE);
    }

    /**
     * Create a <code>middleware</code> table reference
     */
    public Middleware() {
        this(DSL.name("middleware"), null);
    }

    public <O extends Record> Middleware(Table<O> child, ForeignKey<O, MiddlewareRecord> key) {
        super(child, key, MIDDLEWARE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<MiddlewareRecord, Integer> getIdentity() {
        return (Identity<MiddlewareRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<MiddlewareRecord> getPrimaryKey() {
        return Keys.MIDDLEWARE_PKEY;
    }

    @Override
    public Middleware as(String alias) {
        return new Middleware(DSL.name(alias), this);
    }

    @Override
    public Middleware as(Name alias) {
        return new Middleware(alias, this);
    }

    @Override
    public Middleware as(Table<?> alias) {
        return new Middleware(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Middleware rename(String name) {
        return new Middleware(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Middleware rename(Name name) {
        return new Middleware(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Middleware rename(Table<?> name) {
        return new Middleware(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
